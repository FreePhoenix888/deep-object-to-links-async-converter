{
  "package": {
    "name": "@freephoenix888/object-to-links-async-converter",
    "version": "0.0.11-dev.3"
  },
  "data": [
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Type"
      },
      "id": 1
    },
    {
      "package": {
        "dependencyId": 1,
        "containValue": "Boolean"
      },
      "id": 2
    },
    {
      "package": {
        "dependencyId": 2,
        "containValue": "TSX"
      },
      "id": 3
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Handler"
      },
      "id": 4
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "clientSupportsJs"
      },
      "id": 5
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Any"
      },
      "id": 6
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Tree"
      },
      "id": 7
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "TreeIncludeFromCurrent"
      },
      "id": 8
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "dockerSupportsJs"
      },
      "id": 9
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "HandleInsert"
      },
      "id": 10
    },
    {
      "id": "dependency@freephoenix888/boolean",
      "type": 1,
      "from": 2,
      "to": 2
    },
    {
      "id": "clientHandlerCode",
      "type": 3,
      "value": {
        "value": "import {\r\n  DeepClient,\r\n  DeepClientInstance,\r\n  DeepClientResult,\r\n  SerialOperation,\r\n  Table,\r\n} from \"@deep-foundation/deeplinks/imports/client.js\";\r\nimport { BoolExpLink } from \"@deep-foundation/deeplinks/imports/client_types.js\";\r\nimport {\r\n  Link,\r\n  MinilinksResult,\r\n} from \"@deep-foundation/deeplinks/imports/minilinks.js\";\r\nimport { pascalCase } from \"case-anything\";\r\n\r\nasync ({\r\n  deep,\r\n  rootLinkId,\r\n  obj,\r\n}: {\r\n  deep: DeepClient;\r\n  rootLinkId: number;\r\n  obj: Obj;\r\n}) => {\r\n  const util = await import(\"util\");\r\n  const { createSerialOperation } = await import(\r\n    \"@deep-foundation/deeplinks/imports/gql/index.js\"\r\n  );\r\n  const logs: Array<any> = [];\r\n  const DEFAULT_LOG_DEPTH = 3;\r\n\r\n  class ObjectToLinksConverter {\r\n    reservedLinkIds: Array<number>;\r\n    rootLink: Link<number>;\r\n    typesContainer: Link<number>;\r\n    requiredPackageNames = {\r\n      core: \"@deep-foundation/core\",\r\n      boolean: \"@freephoenix888/boolean\",\r\n    };\r\n\r\n    constructor(options: ObjectToLinksConverterOptions) {\r\n      this.rootLink = options.rootLink;\r\n      this.reservedLinkIds = options.reservedLinkIds;\r\n      this.typesContainer = options.typesContainer;\r\n    }\r\n\r\n    static getNamespacedLogger({\r\n      namespace,\r\n      depth = DEFAULT_LOG_DEPTH,\r\n    }: {\r\n      namespace: string;\r\n      depth?: number;\r\n    }) {\r\n      return function (content: any) {\r\n        const message = util.inspect(content, { depth });\r\n        logs.push(`${ObjectToLinksConverter.name}:${namespace}: ${message}`);\r\n      };\r\n    }\r\n\r\n    static async applyContainTreeLinksDownToParentToMinilinks(\r\n      options: ApplyContainTreeLinksDownToParentToMinilinksOptions,\r\n    ) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.applyContainTreeLinksDownToParentToMinilinks.name,\r\n      });\r\n      log({ options });\r\n      const links = (await this.getContainTreeLinksDownToParent({\r\n        linkExp: options.linkExp,\r\n        useMinilinks: false,\r\n      })) as DeepClientResult<Link<number>[]>;\r\n      log({ links });\r\n      const minilinksApplyResult = options.minilinks.apply(links.data);\r\n      log({ minilinksApplyResult });\r\n      return minilinksApplyResult;\r\n    }\r\n\r\n    static async getContainTreeLinksDownToParent(\r\n      options: GetContainTreeLinksDownToLinkOptions,\r\n    ) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.getContainTreeLinksDownToParent.name,\r\n      });\r\n      log({ options });\r\n      const { linkExp, useMinilinks } = options;\r\n      const query: BoolExpLink = {\r\n        up: {\r\n          tree_id: useMinilinks\r\n            ? deep.idLocal(\"@deep-foundation/core\", \"containTree\")\r\n            : await deep.id(\"@deep-foundation/core\", \"containTree\"),\r\n          parent: linkExp,\r\n        },\r\n      };\r\n      log({ query });\r\n      const result = useMinilinks\r\n        ? deep.minilinks.query(query)\r\n        : await deep.select(query);\r\n      log({ result });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Undefined is returned of root object is empty\r\n     */\r\n    static async init(\r\n      options: ObjectToLinksConverterInitOptions,\r\n    ): Promise<ObjectToLinksConverter | undefined> {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: `${this.init.name}`,\r\n      });\r\n      log({ options });\r\n      const { obj } = options;\r\n      const rootLink: Link<number> = options.rootLinkId\r\n        ? await deep.select(options.rootLinkId).then((result) => result.data[0])\r\n        : await deep\r\n            .insert(\r\n              {\r\n                type_id: deep.idLocal(deep.linkId!, \"Root\"),\r\n              },\r\n              {\r\n                returning: deep.linksSelectReturning,\r\n              },\r\n            )\r\n            .then((result) => result.data[0] as Link<number>);\r\n      log({ rootLink });\r\n      if (Object.keys(obj).length === 0) {\r\n        return;\r\n      }\r\n      const applyMinilinksResult =\r\n        await this.applyContainTreeLinksDownToParentToMinilinks({\r\n          linkExp: {\r\n            id: rootLink.id,\r\n          },\r\n          minilinks: deep.minilinks,\r\n        });\r\n      log({ applyMinilinksResult });\r\n      const typesContainer = this.getTypesContainer();\r\n      log({ typesContainer });\r\n      // const linkIdsToReserveCount = this.getLinksToReserveCount({value: obj});\r\n      // log({linkIdsToReserveCount})\r\n      // const reservedLinkIds = await deep.reserve(linkIdsToReserveCount);\r\n      // log({reservedLinkIds})\r\n      const converter = new this({\r\n        reservedLinkIds: [],\r\n        rootLink,\r\n        typesContainer,\r\n      });\r\n      log({ converter });\r\n      return converter;\r\n    }\r\n\r\n    async convert() {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.convert.name,\r\n      });\r\n\r\n      const obj = this.rootLink.value.value;\r\n      log({ obj });\r\n\r\n      const operations = await this.makeUpdateOperationsForObjectValue({\r\n        link: this.rootLink,\r\n        value: obj,\r\n        isRootObject: true,\r\n      });\r\n      log({ operations });\r\n\r\n      const serialResult = await deep.serial({\r\n        operations,\r\n      });\r\n      log({ serialResult });\r\n\r\n      return serialResult;\r\n    }\r\n\r\n    static getTypesContainer() {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: `${this.getTypesContainer.name}`,\r\n      });\r\n      const selectData: BoolExpLink = {\r\n        type_id: deep.idLocal(deep.linkId!, \"TypesContainer\"),\r\n      };\r\n      log({ selectData });\r\n      const queryResult = deep.minilinks.query(selectData);\r\n      log({ queryResult });\r\n      const typesContainer = queryResult[0];\r\n      log({ typesContainer });\r\n      if (!typesContainer) {\r\n        throw new Error(\r\n          `Failed to find package containing types by using select data ${JSON.stringify(\r\n            selectData,\r\n            null,\r\n            2,\r\n          )}`,\r\n        );\r\n      }\r\n      return typesContainer;\r\n    }\r\n\r\n    async getOptions(options: GetOptionsOptions): Promise<Options> {\r\n      const { rootLinkId } = options;\r\n      return {\r\n        typesContainerLink: await this.getTypesContainer(),\r\n      };\r\n    }\r\n\r\n    async getTypesContainer(): Promise<Options[\"typesContainerLink\"]> {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.getTypesContainer.name,\r\n      });\r\n      const {\r\n        data: [typesContainer],\r\n      } = await deep.select({\r\n        from_id: this.rootLink.id,\r\n        type_id: await deep.id(deep.linkId!, \"TypesContainer\"),\r\n      });\r\n      log({ typesContainer });\r\n      return typesContainer;\r\n    }\r\n\r\n    static getLinksToReserveCount(options: {\r\n      value: string | number | boolean | object;\r\n    }): number {\r\n      const { value } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.getLinksToReserveCount.name,\r\n      });\r\n      log({ options });\r\n      let count = 0;\r\n      const typeOfValue = typeof value;\r\n      log({ typeOfValue });\r\n      const reservedLinksCountForOneLink =\r\n        1 + // Type\r\n        1; // Contain for type\r\n      if (typeOfValue === \"string\") {\r\n        count = reservedLinksCountForOneLink;\r\n      } else if (typeOfValue === \"number\") {\r\n        count = reservedLinksCountForOneLink;\r\n      } else if (typeOfValue === \"boolean\") {\r\n        count = reservedLinksCountForOneLink;\r\n      } else if (Array.isArray(value)) {\r\n        const array = value as Array<any>;\r\n        for (const arrayValue of array) {\r\n          if (!arrayValue) return count;\r\n          count += this.getLinksToReserveCount({ value: arrayValue });\r\n        }\r\n      } else if (typeOfValue === \"object\") {\r\n        count += reservedLinksCountForOneLink;\r\n        for (const [propertyKey, propertyValue] of Object.entries(value)) {\r\n          if (!value) return count;\r\n          count += this.getLinksToReserveCount({ value: propertyValue });\r\n        }\r\n      }\r\n      log({ count });\r\n      return count;\r\n    }\r\n\r\n    async makeUpdateOperationsForPrimitiveValue<\r\n      TValue extends string | number | boolean,\r\n    >(options: UpdateOperationsForPrimitiveValueOptions<TValue>) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: `${this.makeUpdateOperationsForPrimitiveValue.name}`,\r\n      });\r\n      log({ options });\r\n      const { link, value } = options;\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      if (typeof value === \"boolean\") {\r\n        serialOperations.push(\r\n          createSerialOperation({\r\n            type: \"update\",\r\n            table: \"links\",\r\n            exp: {\r\n              id: link.id,\r\n            },\r\n            value: {\r\n              to_id: value\r\n                ? await deep.id(this.requiredPackageNames.boolean, \"True\")\r\n                : await deep.id(this.requiredPackageNames.boolean, \"False\"),\r\n            },\r\n          }),\r\n        );\r\n      } else {\r\n        serialOperations.push(\r\n          createSerialOperation({\r\n            type: \"update\",\r\n            table: `${typeof value\r\n              .toString()\r\n              .toLocaleLowerCase()}s` as Table<\"update\">,\r\n            exp: {\r\n              link_id: link.id,\r\n            },\r\n            value: {\r\n              value: link,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n\r\n      return serialOperations;\r\n    }\r\n\r\n    async makeUpdateOperationsForObjectValue(\r\n      options: UpdateOperationsForObjectValueOptions,\r\n    ) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeUpdateOperationsForObjectValue.name,\r\n      });\r\n      log({ options });\r\n      const { link, value, isRootObject, parentPropertyNames = [] } = options;\r\n      const serialOperations: Array<SerialOperation> = [];\r\n\r\n      if (!isRootObject) {\r\n        const linkUpdateOperation = createSerialOperation({\r\n          type: \"update\",\r\n          table: \"objects\",\r\n          exp: {\r\n            link_id: link.id,\r\n          },\r\n          value: {\r\n            value: value,\r\n          },\r\n        });\r\n        log({ linkUpdateOperation });\r\n        serialOperations.push(linkUpdateOperation);\r\n      }\r\n\r\n      const propertyLinks: Array<Link<number>> = [];\r\n      for (const [propertyKey, propertyValue] of Object.entries(value)) {\r\n        log({ propertyKey, propertyValue });\r\n        const propertyName = pascalCase(\r\n          parentPropertyNames.join(\"\") + propertyKey,\r\n        );\r\n        log({ propertyName });\r\n        const propertyTypeLinkId = deep.idLocal(\r\n          this.typesContainer.id,\r\n          propertyName,\r\n        );\r\n        log({ propertyTypeLinkId });\r\n        if (!propertyTypeLinkId) {\r\n          throw new Error(\r\n            `Failed to find type id for ${propertyName}. Path for idLocal: ${[\r\n              this.typesContainer.id,\r\n              propertyName,\r\n            ]}`,\r\n          );\r\n        }\r\n        const [propertyLink] = deep.minilinks.query({\r\n          type_id: propertyTypeLinkId,\r\n          from_id: link.id,\r\n        });\r\n        log({ propertyLink });\r\n        propertyLinks.push(propertyLink);\r\n        if (propertyLink) {\r\n          let propertyUpdateOperations: Array<SerialOperation> = [];\r\n          if (typeof value === \"object\") {\r\n            propertyUpdateOperations =\r\n              await this.makeUpdateOperationsForObjectValue({\r\n                link: propertyLink,\r\n                value: propertyValue,\r\n                parentPropertyNames: [...parentPropertyNames, propertyKey],\r\n              });\r\n          } else {\r\n            propertyUpdateOperations =\r\n              await this.makeUpdateOperationsForPrimitiveValue({\r\n                link: propertyLink,\r\n                value: propertyValue,\r\n              });\r\n          }\r\n          log({ propertyUpdateOperations });\r\n          serialOperations.push(...propertyUpdateOperations);\r\n        } else {\r\n          const idLocalArgs: Parameters<DeepClientInstance[\"idLocal\"]> = [\r\n            this.typesContainer.id,\r\n            pascalCase(typeof value),\r\n          ];\r\n          const typeLinkId = deep.idLocal(...idLocalArgs);\r\n          if (!typeLinkId) {\r\n            throw new Error(\r\n              `Failed to get type id for ${propertyKey}. Path for idLocal: ${idLocalArgs}`,\r\n            );\r\n          }\r\n          const propertyInsertSerialOperations =\r\n            await this.makeInsertSerialOperationsForAnyValue({\r\n              linkId: this.reservedLinkIds.pop()!,\r\n              parentLinkId: link.id,\r\n              typeLinkId: typeLinkId,\r\n              value: propertyValue,\r\n            });\r\n          log({ propertyInsertSerialOperations });\r\n          serialOperations.push(...propertyInsertSerialOperations);\r\n        }\r\n\r\n        log({ serialOperations });\r\n        return serialOperations;\r\n      }\r\n\r\n      return serialOperations;\r\n    }\r\n\r\n    async makeInsertSerialOperationsForStringValue(\r\n      options: MakeInsertSerialOperationsForStringOptions,\r\n    ) {\r\n      return this.makeInsertSerialOperationsForStringOrNumberValue(options);\r\n    }\r\n    async makeInsertSerialOperationsForNumberValue(\r\n      options: MakeInsertSerialOperationsForNumberOptions,\r\n    ) {\r\n      return this.makeInsertSerialOperationsForStringOrNumberValue(options);\r\n    }\r\n    async makeInsertSerialOperationsForBooleanValue(\r\n      options: MakeInsertSerialOperationsForBooleanOptions,\r\n    ) {\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      const { value, parentLinkId, linkId, typeLinkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForStringValue.name,\r\n      });\r\n\r\n      const linkInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          id: linkId,\r\n          type_id: typeLinkId,\r\n          from_id: parentLinkId,\r\n          to_id: value\r\n            ? deep.idLocal(this.requiredPackageNames.boolean, \"True\")\r\n            : deep.idLocal(this.requiredPackageNames.boolean, \"False\"),\r\n        },\r\n      });\r\n      log({ linkInsertSerialOperation });\r\n      serialOperations.push(linkInsertSerialOperation);\r\n\r\n      const containInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(\"@deep-foundation/core\", \"Contain\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ containInsertSerialOperation });\r\n      serialOperations.push(containInsertSerialOperation);\r\n\r\n      log({ serialOperations });\r\n      return serialOperations;\r\n    }\r\n    async makeInsertSerialOperationsForStringOrNumberValue(\r\n      options: MakeInsertSerialOperationsForStringOrNumberOptions,\r\n    ) {\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      const { value, parentLinkId, linkId, typeLinkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForStringValue.name,\r\n      });\r\n      const linkInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          id: linkId,\r\n          from_id: parentLinkId,\r\n          to_id: parentLinkId,\r\n          type_id: typeLinkId,\r\n        },\r\n      });\r\n      log({ linkInsertSerialOperation });\r\n      serialOperations.push(linkInsertSerialOperation);\r\n\r\n      const stringValueInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: `${typeof value}s` as Table<\"insert\">,\r\n        objects: {\r\n          link_id: linkId,\r\n          value: value,\r\n        },\r\n      });\r\n      log({ stringValueInsertSerialOperation });\r\n      serialOperations.push(stringValueInsertSerialOperation);\r\n\r\n      const containInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(\"@deep-foundation/core\", \"Contain\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ containInsertSerialOperation });\r\n      serialOperations.push(containInsertSerialOperation);\r\n\r\n      log({ serialOperations });\r\n      return serialOperations;\r\n    }\r\n    async makeInsertSerialOperationsForObject(\r\n      options: MakeInsertSerialOperationsForObject,\r\n    ) {\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      const { typeLinkId, value, linkId, parentLinkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForStringValue.name,\r\n      });\r\n      const linkInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          id: linkId,\r\n          from_id: parentLinkId,\r\n          to_id: parentLinkId,\r\n          type_id: typeLinkId,\r\n        },\r\n      });\r\n      log({ linkInsertSerialOperation });\r\n      serialOperations.push(linkInsertSerialOperation);\r\n\r\n      const objectValueInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"objects\",\r\n        objects: {\r\n          link_id: linkId,\r\n          value: value,\r\n        },\r\n      });\r\n      log({ objectValueInsertSerialOperation });\r\n      serialOperations.push(objectValueInsertSerialOperation);\r\n\r\n      const containInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(\"@deep-foundation/core\", \"Contain\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ containInsertSerialOperation });\r\n      serialOperations.push(containInsertSerialOperation);\r\n\r\n      for (const [propertyKey, propertyValue] of Object.entries(value)) {\r\n        const typeOfValue = typeof propertyValue;\r\n        if (![\"string\", \"number\", \"boolean\"].includes(typeOfValue)) {\r\n          continue;\r\n        }\r\n        const idLocalArgs: Parameters<DeepClientInstance[\"idLocal\"]> = [\r\n          this.typesContainer.id,\r\n          pascalCase(typeOfValue),\r\n        ];\r\n        const typeLinkId = deep.idLocal(...idLocalArgs);\r\n        if (!typeLinkId) {\r\n          throw new Error(\r\n            `Failed to get type id for ${propertyKey}. Path for idLocal: ${idLocalArgs}`,\r\n          );\r\n        }\r\n        const propertyInsertOperations =\r\n          await this.makeInsertSerialOperationsForAnyValue({\r\n            linkId: this.reservedLinkIds.pop()!,\r\n            parentLinkId: linkId,\r\n            typeLinkId: typeLinkId,\r\n            value: propertyValue,\r\n          });\r\n        serialOperations.push(...propertyInsertOperations);\r\n      }\r\n\r\n      serialOperations.push(containInsertSerialOperation);\r\n      log({ serialOperations });\r\n      return serialOperations;\r\n    }\r\n    async makeInsertSerialOperationsForAnyValue<TValue extends Value>(\r\n      options: MakeInsertSerialOperationsForAnyValueOptions<TValue>,\r\n    ) {\r\n      const { value, parentLinkId, linkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForAnyValue.name,\r\n      });\r\n\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      if (typeof value === \"string\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForStringValue({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else if (typeof value === \"number\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForNumberValue({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else if (typeof value === \"boolean\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForBooleanValue({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else if (typeof value === \"object\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForObject({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else {\r\n        throw new Error(\r\n          `Unknown type of value ${value}: ${typeof value}. Only string, number, boolean, and object are supported`,\r\n        );\r\n      }\r\n\r\n      const propertyInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(deep.linkId!, \"Property\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ propertyInsertSerialOperation });\r\n      serialOperations.push(propertyInsertSerialOperation);\r\n\r\n      return serialOperations;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const result = await main();\r\n    return {\r\n      result,\r\n      logs,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      error,\r\n      logs,\r\n    };\r\n  }\r\n\r\n  async function main() {\r\n    const log = ObjectToLinksConverter.getNamespacedLogger({\r\n      namespace: main.name,\r\n    });\r\n\r\n    const objectToLinksConverter = await ObjectToLinksConverter.init({\r\n      obj,\r\n      rootLinkId,\r\n    });\r\n    log({ objectToLinksConverter });\r\n\r\n    const convertResult = objectToLinksConverter?.convert();\r\n    log({ convertResult });\r\n\r\n    return convertResult;\r\n  }\r\n};\r\n\r\ninterface Obj {\r\n  [key: string]: string | number | Obj | boolean;\r\n}\r\n\r\ntype ApplyContainTreeLinksDownToParentToMinilinksOptions = Omit<\r\n  GetContainTreeLinksDownToLinkOptions,\r\n  \"useMinilinks\"\r\n> & {\r\n  minilinks: MinilinksResult<Link<number>>;\r\n};\r\n\r\ninterface GetContainTreeLinksDownToLinkOptions {\r\n  linkExp: BoolExpLink;\r\n  useMinilinks?: boolean;\r\n}\r\n\r\ninterface ObjectToLinksConverterOptions {\r\n  rootLink: Link<number>;\r\n  reservedLinkIds: Array<number>;\r\n  typesContainer: Link<number>;\r\n}\r\n\r\ninterface ObjectToLinksConverterInitOptions {\r\n  obj: Obj;\r\n  rootLinkId?: number;\r\n}\r\ntype MakeInsertSerialOperationsForStringOrNumberOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<string | number> & {\r\n    value: string | number;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForStringOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<string> & {\r\n    value: string;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForNumberOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<number> & {\r\n    value: number;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForBooleanOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<boolean> & {\r\n    value: boolean;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForObject =\r\n  MakeInsertSerialOperationsForAnyValueOptions<object> & {\r\n    value: object;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForAnyValueOptions<TValue extends Value> = {\r\n  parentLinkId: number;\r\n  linkId: number;\r\n  value: TValue;\r\n  typeLinkId: number;\r\n};\r\n\r\ntype Value = string | number | boolean | object;\r\n\r\ninterface Options {\r\n  typesContainerLink: Link<number>;\r\n}\r\n\r\ninterface GetOptionsOptions {\r\n  rootLinkId: number;\r\n}\r\n\r\ninterface UpdateOperationsForValueOptions<\r\n  TValue extends string | number | boolean | object,\r\n> {\r\n  link: Link<number>;\r\n  value: TValue;\r\n}\r\n\r\ntype UpdateOperationsForPrimitiveValueOptions<\r\n  TValue extends string | number | boolean,\r\n> = UpdateOperationsForValueOptions<TValue>;\r\n\r\ntype UpdateOperationsForRootObject = UpdateOperationsForValueOptions<object> & {\r\n  isRootObject: true;\r\n  parentPropertyNames?: undefined;\r\n};\r\n\r\ntype UpdateOperationsForNonRootObject =\r\n  UpdateOperationsForValueOptions<object> & {\r\n    isRootObject?: false;\r\n    parentPropertyNames: Array<string>;\r\n  };\r\n\r\ntype UpdateOperationsForObjectValueOptions =\r\n  | UpdateOperationsForRootObject\r\n  | UpdateOperationsForNonRootObject;\r\n"
      }
    },
    {
      "id": "clientHandler",
      "type": 4,
      "from": 5,
      "to": "clientHandlerCode"
    },
    {
      "id": "Boolean",
      "type": 1,
      "from": 6,
      "to": 2
    },
    {
      "id": "Object",
      "type": 1,
      "from": 6,
      "to": 6
    },
    {
      "id": "Number",
      "type": 1,
      "from": 6,
      "to": 6
    },
    {
      "id": "String",
      "type": 1,
      "from": 6,
      "to": 6
    },
    {
      "id": "ParseIt",
      "type": 1
    },
    {
      "id": "parseItInsertHandlerCode",
      "type": 3,
      "value": {
        "value": "import {\r\n  DeepClient,\r\n  DeepClientInstance,\r\n  DeepClientResult,\r\n  SerialOperation,\r\n  Table,\r\n} from \"@deep-foundation/deeplinks/imports/client.js\";\r\nimport { BoolExpLink } from \"@deep-foundation/deeplinks/imports/client_types.js\";\r\nimport {\r\n  Link,\r\n  MinilinksResult,\r\n} from \"@deep-foundation/deeplinks/imports/minilinks.js\";\r\nimport { pascalCase } from \"case-anything\";\r\n\r\nasync ({\r\n  deep,\r\n  rootLinkId,\r\n  obj,\r\n}: {\r\n  deep: DeepClient;\r\n  rootLinkId: number;\r\n  obj: Obj;\r\n}) => {\r\n  const util = await import(\"util\");\r\n  const { createSerialOperation } = await import(\r\n    \"@deep-foundation/deeplinks/imports/gql/index.js\"\r\n  );\r\n  const logs: Array<any> = [];\r\n  const DEFAULT_LOG_DEPTH = 3;\r\n\r\n  class ObjectToLinksConverter {\r\n    reservedLinkIds: Array<number>;\r\n    rootLink: Link<number>;\r\n    typesContainer: Link<number>;\r\n    requiredPackageNames = {\r\n      core: \"@deep-foundation/core\",\r\n      boolean: \"@freephoenix888/boolean\",\r\n    };\r\n\r\n    constructor(options: ObjectToLinksConverterOptions) {\r\n      this.rootLink = options.rootLink;\r\n      this.reservedLinkIds = options.reservedLinkIds;\r\n      this.typesContainer = options.typesContainer;\r\n    }\r\n\r\n    static getNamespacedLogger({\r\n      namespace,\r\n      depth = DEFAULT_LOG_DEPTH,\r\n    }: {\r\n      namespace: string;\r\n      depth?: number;\r\n    }) {\r\n      return function (content: any) {\r\n        const message = util.inspect(content, { depth });\r\n        logs.push(`${ObjectToLinksConverter.name}:${namespace}: ${message}`);\r\n      };\r\n    }\r\n\r\n    static async applyContainTreeLinksDownToParentToMinilinks(\r\n      options: ApplyContainTreeLinksDownToParentToMinilinksOptions,\r\n    ) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.applyContainTreeLinksDownToParentToMinilinks.name,\r\n      });\r\n      log({ options });\r\n      const links = (await this.getContainTreeLinksDownToParent({\r\n        linkExp: options.linkExp,\r\n        useMinilinks: false,\r\n      })) as DeepClientResult<Link<number>[]>;\r\n      log({ links });\r\n      const minilinksApplyResult = options.minilinks.apply(links.data);\r\n      log({ minilinksApplyResult });\r\n      return minilinksApplyResult;\r\n    }\r\n\r\n    static async getContainTreeLinksDownToParent(\r\n      options: GetContainTreeLinksDownToLinkOptions,\r\n    ) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.getContainTreeLinksDownToParent.name,\r\n      });\r\n      log({ options });\r\n      const { linkExp, useMinilinks } = options;\r\n      const query: BoolExpLink = {\r\n        up: {\r\n          tree_id: useMinilinks\r\n            ? deep.idLocal(\"@deep-foundation/core\", \"containTree\")\r\n            : await deep.id(\"@deep-foundation/core\", \"containTree\"),\r\n          parent: linkExp,\r\n        },\r\n      };\r\n      log({ query });\r\n      const result = useMinilinks\r\n        ? deep.minilinks.query(query)\r\n        : await deep.select(query);\r\n      log({ result });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Undefined is returned of root object is empty\r\n     */\r\n    static async init(\r\n      options: ObjectToLinksConverterInitOptions,\r\n    ): Promise<ObjectToLinksConverter | undefined> {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: `${this.init.name}`,\r\n      });\r\n      log({ options });\r\n      const { obj } = options;\r\n      const rootLink: Link<number> = options.rootLinkId\r\n        ? await deep.select(options.rootLinkId).then((result) => result.data[0])\r\n        : await deep\r\n            .insert(\r\n              {\r\n                type_id: deep.idLocal(deep.linkId!, \"Root\"),\r\n              },\r\n              {\r\n                returning: deep.linksSelectReturning,\r\n              },\r\n            )\r\n            .then((result) => result.data[0] as Link<number>);\r\n      log({ rootLink });\r\n      if (Object.keys(obj).length === 0) {\r\n        return;\r\n      }\r\n      const applyMinilinksResult =\r\n        await this.applyContainTreeLinksDownToParentToMinilinks({\r\n          linkExp: {\r\n            id: rootLink.id,\r\n          },\r\n          minilinks: deep.minilinks,\r\n        });\r\n      log({ applyMinilinksResult });\r\n      const typesContainer = this.getTypesContainer();\r\n      log({ typesContainer });\r\n      // const linkIdsToReserveCount = this.getLinksToReserveCount({value: obj});\r\n      // log({linkIdsToReserveCount})\r\n      // const reservedLinkIds = await deep.reserve(linkIdsToReserveCount);\r\n      // log({reservedLinkIds})\r\n      const converter = new this({\r\n        reservedLinkIds: [],\r\n        rootLink,\r\n        typesContainer,\r\n      });\r\n      log({ converter });\r\n      return converter;\r\n    }\r\n\r\n    async convert() {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.convert.name,\r\n      });\r\n\r\n      const obj = this.rootLink.value.value;\r\n      log({ obj });\r\n\r\n      const operations = await this.makeUpdateOperationsForObjectValue({\r\n        link: this.rootLink,\r\n        value: obj,\r\n        isRootObject: true,\r\n      });\r\n      log({ operations });\r\n\r\n      const serialResult = await deep.serial({\r\n        operations,\r\n      });\r\n      log({ serialResult });\r\n\r\n      return serialResult;\r\n    }\r\n\r\n    static getTypesContainer() {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: `${this.getTypesContainer.name}`,\r\n      });\r\n      const selectData: BoolExpLink = {\r\n        type_id: deep.idLocal(deep.linkId!, \"TypesContainer\"),\r\n      };\r\n      log({ selectData });\r\n      const queryResult = deep.minilinks.query(selectData);\r\n      log({ queryResult });\r\n      const typesContainer = queryResult[0];\r\n      log({ typesContainer });\r\n      if (!typesContainer) {\r\n        throw new Error(\r\n          `Failed to find package containing types by using select data ${JSON.stringify(\r\n            selectData,\r\n            null,\r\n            2,\r\n          )}`,\r\n        );\r\n      }\r\n      return typesContainer;\r\n    }\r\n\r\n    async getOptions(options: GetOptionsOptions): Promise<Options> {\r\n      const { rootLinkId } = options;\r\n      return {\r\n        typesContainerLink: await this.getTypesContainer(),\r\n      };\r\n    }\r\n\r\n    async getTypesContainer(): Promise<Options[\"typesContainerLink\"]> {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.getTypesContainer.name,\r\n      });\r\n      const {\r\n        data: [typesContainer],\r\n      } = await deep.select({\r\n        from_id: this.rootLink.id,\r\n        type_id: await deep.id(deep.linkId!, \"TypesContainer\"),\r\n      });\r\n      log({ typesContainer });\r\n      return typesContainer;\r\n    }\r\n\r\n    static getLinksToReserveCount(options: {\r\n      value: string | number | boolean | object;\r\n    }): number {\r\n      const { value } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.getLinksToReserveCount.name,\r\n      });\r\n      log({ options });\r\n      let count = 0;\r\n      const typeOfValue = typeof value;\r\n      log({ typeOfValue });\r\n      const reservedLinksCountForOneLink =\r\n        1 + // Type\r\n        1; // Contain for type\r\n      if (typeOfValue === \"string\") {\r\n        count = reservedLinksCountForOneLink;\r\n      } else if (typeOfValue === \"number\") {\r\n        count = reservedLinksCountForOneLink;\r\n      } else if (typeOfValue === \"boolean\") {\r\n        count = reservedLinksCountForOneLink;\r\n      } else if (Array.isArray(value)) {\r\n        const array = value as Array<any>;\r\n        for (const arrayValue of array) {\r\n          if (!arrayValue) return count;\r\n          count += this.getLinksToReserveCount({ value: arrayValue });\r\n        }\r\n      } else if (typeOfValue === \"object\") {\r\n        count += reservedLinksCountForOneLink;\r\n        for (const [propertyKey, propertyValue] of Object.entries(value)) {\r\n          if (!value) return count;\r\n          count += this.getLinksToReserveCount({ value: propertyValue });\r\n        }\r\n      }\r\n      log({ count });\r\n      return count;\r\n    }\r\n\r\n    async makeUpdateOperationsForPrimitiveValue<\r\n      TValue extends string | number | boolean,\r\n    >(options: UpdateOperationsForPrimitiveValueOptions<TValue>) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: `${this.makeUpdateOperationsForPrimitiveValue.name}`,\r\n      });\r\n      log({ options });\r\n      const { link, value } = options;\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      if (typeof value === \"boolean\") {\r\n        serialOperations.push(\r\n          createSerialOperation({\r\n            type: \"update\",\r\n            table: \"links\",\r\n            exp: {\r\n              id: link.id,\r\n            },\r\n            value: {\r\n              to_id: value\r\n                ? await deep.id(this.requiredPackageNames.boolean, \"True\")\r\n                : await deep.id(this.requiredPackageNames.boolean, \"False\"),\r\n            },\r\n          }),\r\n        );\r\n      } else {\r\n        serialOperations.push(\r\n          createSerialOperation({\r\n            type: \"update\",\r\n            table: `${typeof value\r\n              .toString()\r\n              .toLocaleLowerCase()}s` as Table<\"update\">,\r\n            exp: {\r\n              link_id: link.id,\r\n            },\r\n            value: {\r\n              value: link,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n\r\n      return serialOperations;\r\n    }\r\n\r\n    async makeUpdateOperationsForObjectValue(\r\n      options: UpdateOperationsForObjectValueOptions,\r\n    ) {\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeUpdateOperationsForObjectValue.name,\r\n      });\r\n      log({ options });\r\n      const { link, value, isRootObject, parentPropertyNames = [] } = options;\r\n      const serialOperations: Array<SerialOperation> = [];\r\n\r\n      if (!isRootObject) {\r\n        const linkUpdateOperation = createSerialOperation({\r\n          type: \"update\",\r\n          table: \"objects\",\r\n          exp: {\r\n            link_id: link.id,\r\n          },\r\n          value: {\r\n            value: value,\r\n          },\r\n        });\r\n        log({ linkUpdateOperation });\r\n        serialOperations.push(linkUpdateOperation);\r\n      }\r\n\r\n      const propertyLinks: Array<Link<number>> = [];\r\n      for (const [propertyKey, propertyValue] of Object.entries(value)) {\r\n        log({ propertyKey, propertyValue });\r\n        const propertyName = pascalCase(\r\n          parentPropertyNames.join(\"\") + propertyKey,\r\n        );\r\n        log({ propertyName });\r\n        const propertyTypeLinkId = deep.idLocal(\r\n          this.typesContainer.id,\r\n          propertyName,\r\n        );\r\n        log({ propertyTypeLinkId });\r\n        if (!propertyTypeLinkId) {\r\n          throw new Error(\r\n            `Failed to find type id for ${propertyName}. Path for idLocal: ${[\r\n              this.typesContainer.id,\r\n              propertyName,\r\n            ]}`,\r\n          );\r\n        }\r\n        const [propertyLink] = deep.minilinks.query({\r\n          type_id: propertyTypeLinkId,\r\n          from_id: link.id,\r\n        });\r\n        log({ propertyLink });\r\n        propertyLinks.push(propertyLink);\r\n        if (propertyLink) {\r\n          let propertyUpdateOperations: Array<SerialOperation> = [];\r\n          if (typeof value === \"object\") {\r\n            propertyUpdateOperations =\r\n              await this.makeUpdateOperationsForObjectValue({\r\n                link: propertyLink,\r\n                value: propertyValue,\r\n                parentPropertyNames: [...parentPropertyNames, propertyKey],\r\n              });\r\n          } else {\r\n            propertyUpdateOperations =\r\n              await this.makeUpdateOperationsForPrimitiveValue({\r\n                link: propertyLink,\r\n                value: propertyValue,\r\n              });\r\n          }\r\n          log({ propertyUpdateOperations });\r\n          serialOperations.push(...propertyUpdateOperations);\r\n        } else {\r\n          const idLocalArgs: Parameters<DeepClientInstance[\"idLocal\"]> = [\r\n            this.typesContainer.id,\r\n            pascalCase(typeof value),\r\n          ];\r\n          const typeLinkId = deep.idLocal(...idLocalArgs);\r\n          if (!typeLinkId) {\r\n            throw new Error(\r\n              `Failed to get type id for ${propertyKey}. Path for idLocal: ${idLocalArgs}`,\r\n            );\r\n          }\r\n          const propertyInsertSerialOperations =\r\n            await this.makeInsertSerialOperationsForAnyValue({\r\n              linkId: this.reservedLinkIds.pop()!,\r\n              parentLinkId: link.id,\r\n              typeLinkId: typeLinkId,\r\n              value: propertyValue,\r\n            });\r\n          log({ propertyInsertSerialOperations });\r\n          serialOperations.push(...propertyInsertSerialOperations);\r\n        }\r\n\r\n        log({ serialOperations });\r\n        return serialOperations;\r\n      }\r\n\r\n      return serialOperations;\r\n    }\r\n\r\n    async makeInsertSerialOperationsForStringValue(\r\n      options: MakeInsertSerialOperationsForStringOptions,\r\n    ) {\r\n      return this.makeInsertSerialOperationsForStringOrNumberValue(options);\r\n    }\r\n    async makeInsertSerialOperationsForNumberValue(\r\n      options: MakeInsertSerialOperationsForNumberOptions,\r\n    ) {\r\n      return this.makeInsertSerialOperationsForStringOrNumberValue(options);\r\n    }\r\n    async makeInsertSerialOperationsForBooleanValue(\r\n      options: MakeInsertSerialOperationsForBooleanOptions,\r\n    ) {\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      const { value, parentLinkId, linkId, typeLinkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForStringValue.name,\r\n      });\r\n\r\n      const linkInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          id: linkId,\r\n          type_id: typeLinkId,\r\n          from_id: parentLinkId,\r\n          to_id: value\r\n            ? deep.idLocal(this.requiredPackageNames.boolean, \"True\")\r\n            : deep.idLocal(this.requiredPackageNames.boolean, \"False\"),\r\n        },\r\n      });\r\n      log({ linkInsertSerialOperation });\r\n      serialOperations.push(linkInsertSerialOperation);\r\n\r\n      const containInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(\"@deep-foundation/core\", \"Contain\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ containInsertSerialOperation });\r\n      serialOperations.push(containInsertSerialOperation);\r\n\r\n      log({ serialOperations });\r\n      return serialOperations;\r\n    }\r\n    async makeInsertSerialOperationsForStringOrNumberValue(\r\n      options: MakeInsertSerialOperationsForStringOrNumberOptions,\r\n    ) {\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      const { value, parentLinkId, linkId, typeLinkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForStringValue.name,\r\n      });\r\n      const linkInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          id: linkId,\r\n          from_id: parentLinkId,\r\n          to_id: parentLinkId,\r\n          type_id: typeLinkId,\r\n        },\r\n      });\r\n      log({ linkInsertSerialOperation });\r\n      serialOperations.push(linkInsertSerialOperation);\r\n\r\n      const stringValueInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: `${typeof value}s` as Table<\"insert\">,\r\n        objects: {\r\n          link_id: linkId,\r\n          value: value,\r\n        },\r\n      });\r\n      log({ stringValueInsertSerialOperation });\r\n      serialOperations.push(stringValueInsertSerialOperation);\r\n\r\n      const containInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(\"@deep-foundation/core\", \"Contain\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ containInsertSerialOperation });\r\n      serialOperations.push(containInsertSerialOperation);\r\n\r\n      log({ serialOperations });\r\n      return serialOperations;\r\n    }\r\n    async makeInsertSerialOperationsForObject(\r\n      options: MakeInsertSerialOperationsForObject,\r\n    ) {\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      const { typeLinkId, value, linkId, parentLinkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForStringValue.name,\r\n      });\r\n      const linkInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          id: linkId,\r\n          from_id: parentLinkId,\r\n          to_id: parentLinkId,\r\n          type_id: typeLinkId,\r\n        },\r\n      });\r\n      log({ linkInsertSerialOperation });\r\n      serialOperations.push(linkInsertSerialOperation);\r\n\r\n      const objectValueInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"objects\",\r\n        objects: {\r\n          link_id: linkId,\r\n          value: value,\r\n        },\r\n      });\r\n      log({ objectValueInsertSerialOperation });\r\n      serialOperations.push(objectValueInsertSerialOperation);\r\n\r\n      const containInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(\"@deep-foundation/core\", \"Contain\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ containInsertSerialOperation });\r\n      serialOperations.push(containInsertSerialOperation);\r\n\r\n      for (const [propertyKey, propertyValue] of Object.entries(value)) {\r\n        const typeOfValue = typeof propertyValue;\r\n        if (![\"string\", \"number\", \"boolean\"].includes(typeOfValue)) {\r\n          continue;\r\n        }\r\n        const idLocalArgs: Parameters<DeepClientInstance[\"idLocal\"]> = [\r\n          this.typesContainer.id,\r\n          pascalCase(typeOfValue),\r\n        ];\r\n        const typeLinkId = deep.idLocal(...idLocalArgs);\r\n        if (!typeLinkId) {\r\n          throw new Error(\r\n            `Failed to get type id for ${propertyKey}. Path for idLocal: ${idLocalArgs}`,\r\n          );\r\n        }\r\n        const propertyInsertOperations =\r\n          await this.makeInsertSerialOperationsForAnyValue({\r\n            linkId: this.reservedLinkIds.pop()!,\r\n            parentLinkId: linkId,\r\n            typeLinkId: typeLinkId,\r\n            value: propertyValue,\r\n          });\r\n        serialOperations.push(...propertyInsertOperations);\r\n      }\r\n\r\n      serialOperations.push(containInsertSerialOperation);\r\n      log({ serialOperations });\r\n      return serialOperations;\r\n    }\r\n    async makeInsertSerialOperationsForAnyValue<TValue extends Value>(\r\n      options: MakeInsertSerialOperationsForAnyValueOptions<TValue>,\r\n    ) {\r\n      const { value, parentLinkId, linkId } = options;\r\n      const log = ObjectToLinksConverter.getNamespacedLogger({\r\n        namespace: this.makeInsertSerialOperationsForAnyValue.name,\r\n      });\r\n\r\n      const serialOperations: Array<SerialOperation> = [];\r\n      if (typeof value === \"string\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForStringValue({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else if (typeof value === \"number\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForNumberValue({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else if (typeof value === \"boolean\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForBooleanValue({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else if (typeof value === \"object\") {\r\n        const innerSerialOperations =\r\n          await this.makeInsertSerialOperationsForObject({\r\n            ...options,\r\n            value,\r\n          });\r\n        serialOperations.push(...innerSerialOperations);\r\n      } else {\r\n        throw new Error(\r\n          `Unknown type of value ${value}: ${typeof value}. Only string, number, boolean, and object are supported`,\r\n        );\r\n      }\r\n\r\n      const propertyInsertSerialOperation = createSerialOperation({\r\n        type: \"insert\",\r\n        table: \"links\",\r\n        objects: {\r\n          type_id: deep.idLocal(deep.linkId!, \"Property\"),\r\n          from_id: parentLinkId,\r\n          to_id: linkId,\r\n        },\r\n      });\r\n      log({ propertyInsertSerialOperation });\r\n      serialOperations.push(propertyInsertSerialOperation);\r\n\r\n      return serialOperations;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const result = await main();\r\n    return {\r\n      result,\r\n      logs,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      error,\r\n      logs,\r\n    };\r\n  }\r\n\r\n  async function main() {\r\n    const log = ObjectToLinksConverter.getNamespacedLogger({\r\n      namespace: main.name,\r\n    });\r\n\r\n    const objectToLinksConverter = await ObjectToLinksConverter.init({\r\n      obj,\r\n      rootLinkId,\r\n    });\r\n    log({ objectToLinksConverter });\r\n\r\n    const convertResult = objectToLinksConverter?.convert();\r\n    log({ convertResult });\r\n\r\n    return convertResult;\r\n  }\r\n};\r\n\r\ninterface Obj {\r\n  [key: string]: string | number | Obj | boolean;\r\n}\r\n\r\ntype ApplyContainTreeLinksDownToParentToMinilinksOptions = Omit<\r\n  GetContainTreeLinksDownToLinkOptions,\r\n  \"useMinilinks\"\r\n> & {\r\n  minilinks: MinilinksResult<Link<number>>;\r\n};\r\n\r\ninterface GetContainTreeLinksDownToLinkOptions {\r\n  linkExp: BoolExpLink;\r\n  useMinilinks?: boolean;\r\n}\r\n\r\ninterface ObjectToLinksConverterOptions {\r\n  rootLink: Link<number>;\r\n  reservedLinkIds: Array<number>;\r\n  typesContainer: Link<number>;\r\n}\r\n\r\ninterface ObjectToLinksConverterInitOptions {\r\n  obj: Obj;\r\n  rootLinkId?: number;\r\n}\r\ntype MakeInsertSerialOperationsForStringOrNumberOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<string | number> & {\r\n    value: string | number;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForStringOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<string> & {\r\n    value: string;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForNumberOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<number> & {\r\n    value: number;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForBooleanOptions =\r\n  MakeInsertSerialOperationsForAnyValueOptions<boolean> & {\r\n    value: boolean;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForObject =\r\n  MakeInsertSerialOperationsForAnyValueOptions<object> & {\r\n    value: object;\r\n  };\r\n\r\ntype MakeInsertSerialOperationsForAnyValueOptions<TValue extends Value> = {\r\n  parentLinkId: number;\r\n  linkId: number;\r\n  value: TValue;\r\n  typeLinkId: number;\r\n};\r\n\r\ntype Value = string | number | boolean | object;\r\n\r\ninterface Options {\r\n  typesContainerLink: Link<number>;\r\n}\r\n\r\ninterface GetOptionsOptions {\r\n  rootLinkId: number;\r\n}\r\n\r\ninterface UpdateOperationsForValueOptions<\r\n  TValue extends string | number | boolean | object,\r\n> {\r\n  link: Link<number>;\r\n  value: TValue;\r\n}\r\n\r\ntype UpdateOperationsForPrimitiveValueOptions<\r\n  TValue extends string | number | boolean,\r\n> = UpdateOperationsForValueOptions<TValue>;\r\n\r\ntype UpdateOperationsForRootObject = UpdateOperationsForValueOptions<object> & {\r\n  isRootObject: true;\r\n  parentPropertyNames?: undefined;\r\n};\r\n\r\ntype UpdateOperationsForNonRootObject =\r\n  UpdateOperationsForValueOptions<object> & {\r\n    isRootObject?: false;\r\n    parentPropertyNames: Array<string>;\r\n  };\r\n\r\ntype UpdateOperationsForObjectValueOptions =\r\n  | UpdateOperationsForRootObject\r\n  | UpdateOperationsForNonRootObject;\r\n"
      }
    },
    {
      "id": "propertiesTree",
      "type": 7
    },
    {
      "id": "treeIncludeFromCurrentObject",
      "type": 8,
      "from": "propertiesTree",
      "to": "Object"
    },
    {
      "id": "treeIncludeFromCurrentNumber",
      "type": 8,
      "from": "propertiesTree",
      "to": "Number"
    },
    {
      "id": "treeIncludeFromCurrentString",
      "type": 8,
      "from": "propertiesTree",
      "to": "String"
    },
    {
      "id": "treeIncludeFromCurrentBoolean",
      "type": 8,
      "from": "propertiesTree",
      "to": 2
    },
    {
      "id": "parseItInsertHandler",
      "type": 4,
      "from": 9,
      "to": "parseItInsertHandlerCode"
    },
    {
      "id": "handleParseItInsert",
      "type": 10,
      "from": "ParseIt",
      "to": "parseItInsertHandler"
    }
  ],
  "errors": [],
  "dependencies": [
    {
      "name": "@deep-foundation/core",
      "version": "0.0.2"
    },
    {
      "name": "@freephoenix888/boolean",
      "version": "0.0.1"
    },
    {
      "name": "@deep-foundation/tsx",
      "version": "0.0.4"
    }
  ]
}
